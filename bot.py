import logging
import asyncio
import json
import tempfile
import os
import calendar
import uuid

from datetime import datetime, timedelta, date

import dateparser
import speech_recognition as sr
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
API_TOKEN = 7504092318:AAEiytgbg-iCpVDVGCv9wN0Z-uSv1WdzMC8

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
recognizer = sr.Recognizer()

# -----------------------
# –•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•
# -----------------------

def load_user_settings():
    try:
        with open("user_settings.json", "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_user_settings(settings):
    try:
        with open("user_settings.json", "w") as f:
            json.dump(settings, f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

user_settings = load_user_settings()

def load_events():
    try:
        with open("events.json", "r") as f:
            return json.load(f).get("events", [])
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_events(events):
    try:
        with open("events.json", "w") as f:
            json.dump({"events": events}, f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {e}")

events = load_events()

# -----------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# -----------------------

def event_occurs_on(event, target_date: date) -> bool:
    try:
        event_date = datetime.fromisoformat(event["date"]).date()
    except Exception:
        return False
    recurrence = event.get("recurrence", "none")
    if recurrence == "none":
        return event_date == target_date
    elif recurrence == "daily":
        return event_date <= target_date
    elif recurrence == "weekly":
        return event_date <= target_date and event_date.weekday() == target_date.weekday()
    elif recurrence == "monthly":
        return event_date <= target_date and event_date.day == target_date.day
    elif recurrence == "yearly":
        return event_date <= target_date and event_date.month == target_date.month and event_date.day == target_date.day
    return False

def generate_calendar(year: int, month: int):
    inline_kb = InlineKeyboardMarkup(row_width=7)
    month_year = f"{calendar.month_name[month]} {year}"
    inline_kb.add(InlineKeyboardButton(month_year, callback_data="ignore"))
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    inline_kb.add(*[InlineKeyboardButton(day, callback_data="ignore") for day in week_days])
    month_cal = calendar.monthcalendar(year, month)
    for week in month_cal:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                day_str = f"{year}-{month:02d}-{day:02d}"
                row.append(InlineKeyboardButton(str(day), callback_data=f"day:{day_str}"))
        inline_kb.add(*row)
    prev_month = month - 1
    prev_year = year
    if prev_month < 1:
        prev_month = 12
        prev_year -= 1
    next_month = month + 1
    next_year = year
    if next_month > 12:
        next_month = 1
        next_year += 1
    inline_kb.add(
        InlineKeyboardButton("<<", callback_data=f"calendar:{prev_year}-{prev_month:02d}"),
        InlineKeyboardButton(">>", callback_data=f"calendar:{next_year}-{next_month:02d}")
    )
    return inline_kb

# -----------------------
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–æ—Å—Ç–æ—è–Ω–∏—è
# -----------------------

# –î–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
# –ö–ª—é—á ‚Äì user_id, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏: step, date, title, category, recurrence, reminder, description
event_creation_state = {}
# –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
event_edit_state = {}
# –î–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
search_state = {}
# –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–Ω—è/–Ω–µ–¥–µ–ª–∏ (–ø—Ä–æ—Å—Ç–æ–π —Ñ–ª–∞–≥ —Ö—Ä–∞–Ω–µ–Ω–∏—è)
if not hasattr(dp, 'day_view_state'):
    dp.day_view_state = {}
if not hasattr(dp, 'week_view_state'):
    dp.week_view_state = {}

# -----------------------
# –û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ
# -----------------------

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üìÖ –ú–µ—Å—è—Ü"))
main_kb.add(KeyboardButton("üìÖ –î–µ–Ω—å"), KeyboardButton("üìÖ –ù–µ–¥–µ–ª—è"))
main_kb.add(KeyboardButton("üìÅ –ê—Ä—Ö–∏–≤"))
main_kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"))
main_kb.add(KeyboardButton("üîç –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π"))
main_kb.add(KeyboardButton("üìä –û—Ç—á–µ—Ç"))
main_kb.add(KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
main_kb.add(KeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"))

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç!\n\n"
        "–Ø ‚Äî –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—à–∏—Ö –¥–µ–ª. "
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Ö –ø–æ –¥–Ω—è–º, –Ω–µ–¥–µ–ª—è–º –∏ –º–µ—Å—è—Ü–∞–º, "
        "–∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )
    await message.answer(welcome_text, reply_markup=main_kb)

# -----------------------
# –ü–†–û–°–ú–û–¢–† –ö–ê–õ–ï–ù–î–ê–†–Ø
# -----------------------

@dp.message_handler(lambda message: message.text == "üìÖ –ú–µ—Å—è—Ü")
async def month_calendar_handler(message: types.Message):
    today = datetime.today()
    inline_kb = generate_calendar(today.year, today.month)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=inline_kb)

@dp.callback_query_handler(lambda call: call.data.startswith("calendar:"))
async def calendar_navigation(call: types.CallbackQuery):
    _, ym = call.data.split(":", 1)
    year, month = map(int, ym.split("-"))
    inline_kb = generate_calendar(year, month)
    await call.message.edit_reply_markup(reply_markup=inline_kb)

@dp.callback_query_handler(lambda call: call.data.startswith("day:"))
async def day_selection(call: types.CallbackQuery):
    _, date_str = call.data.split(":", 1)
    selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()
    user_id = call.from_user.id
    user_events = [ev for ev in events if ev["user_id"] == user_id and event_occurs_on(ev, selected_date)]
    text = f"–°–æ–±—ã—Ç–∏—è –Ω–∞ {selected_date.isoformat()}:\n"
    if not user_events:
        text += "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π."
    else:
        for ev in user_events:
            text += f"\nID: {ev['id']}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {ev['title']}\n–î–∞—Ç–∞: {ev['date']}\n"
            if ev.get("category"):
                text += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ev['category']}\n"
            if ev.get("recurrence", "none") != "none":
                text += f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {ev['recurrence']}\n"
    inline_kb = InlineKeyboardMarkup()
    inline_kb.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data=f"add:{date_str}"))
    if user_events:
        for ev in user_events:
            inline_kb.add(InlineKeyboardButton(f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å {ev['title']}", callback_data=f"edit:{ev['id']}"))
            inline_kb.add(InlineKeyboardButton(f"üóë –£–¥–∞–ª–∏—Ç—å {ev['title']}", callback_data=f"delete:{ev['id']}"))
    await call.message.edit_text(text, reply_markup=inline_kb)

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å (—Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ "üìÖ –î–µ–Ω—å")
@dp.message_handler(lambda message: message.text == "üìÖ –î–µ–Ω—å")
async def start_day_view(message: types.Message):
    dp.day_view_state[message.from_user.id] = True
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞', –∏–ª–∏ '2025-02-05'):")

@dp.message_handler(lambda message: message.from_user.id in dp.day_view_state)
async def day_view_input(message: types.Message):
    user_id = message.from_user.id
    parsed_date = dateparser.parse(message.text, languages=['ru'])
    if not parsed_date:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    target_date = parsed_date.date()
    user_events = [ev for ev in events if ev["user_id"] == user_id and event_occurs_on(ev, target_date)]
    text = f"–°–æ–±—ã—Ç–∏—è –Ω–∞ {target_date.isoformat()}:\n"
    if not user_events:
        text += "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π."
    else:
        for ev in user_events:
            text += f"\nID: {ev['id']}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {ev['title']}\n–î–∞—Ç–∞: {ev['date']}\n"
    await message.answer(text)
    dp.day_view_state.pop(user_id, None)

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é (—Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ "üìÖ –ù–µ–¥–µ–ª—è")
@dp.message_handler(lambda message: message.text == "üìÖ –ù–µ–¥–µ–ª—è")
async def week_view_handler(message: types.Message):
    dp.week_view_state[message.from_user.id] = True
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞', –∏–ª–∏ '2025-02-05'):")

@dp.message_handler(lambda message: message.from_user.id in dp.week_view_state)
async def week_view_input(message: types.Message):
    user_id = message.from_user.id
    parsed_date = dateparser.parse(message.text, languages=['ru'])
    if not parsed_date:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    target_date = parsed_date.date()
    start_of_week = target_date - timedelta(days=target_date.weekday())
    end_of_week = start_of_week + timedelta(days=6)
    text = f"–°–æ–±—ã—Ç–∏—è —Å {start_of_week.isoformat()} –ø–æ {end_of_week.isoformat()}:\n"
    found = False
    current_day = start_of_week
    while current_day <= end_of_week:
        day_events = [ev for ev in events if ev["user_id"] == user_id and event_occurs_on(ev, current_day)]
        if day_events:
            text += f"\n–î–∞—Ç–∞: {current_day.isoformat()}\n"
            for ev in day_events:
                text += f"ID: {ev['id']} –ù–∞–∑–≤–∞–Ω–∏–µ: {ev['title']}\n"
            found = True
        current_day += timedelta(days=1)
    if not found:
        text += "\n–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π."
    await message.answer(text)
    dp.week_view_state.pop(user_id, None)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (—Å–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
@dp.message_handler(lambda message: message.text == "üìÅ –ê—Ä—Ö–∏–≤")
async def archive_view_handler(message: types.Message):
    user_id = message.from_user.id
    threshold = date.today() - timedelta(days=30)
    archived_events = [ev for ev in events if ev["user_id"] == user_id and datetime.fromisoformat(ev["date"]).date() < threshold]
    text = "–ê—Ä—Ö–∏–≤ —Å–æ–±—ã—Ç–∏–π (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π):\n"
    if not archived_events:
        text += "–ù–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
    else:
        for ev in archived_events:
            text += f"\nID: {ev['id']} –ù–∞–∑–≤–∞–Ω–∏–µ: {ev['title']} –î–∞—Ç–∞: {ev['date']}\n"
    await message.answer(text)

# -----------------------
# –°–û–ó–î–ê–ù–ò–ï –°–û–ë–´–¢–ò–Ø (–ü–æ—à–∞–≥–æ–≤–æ)
# -----------------------

# –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è ‚Äì –¥–∞—Ç–∞ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–∞
@dp.callback_query_handler(lambda call: call.data.startswith("add:"))
async def add_event_callback(call: types.CallbackQuery):
    _, date_str = call.data.split(":", 1)
    user_id = call.from_user.id
    event_creation_state[user_id] = {"step": "title", "date": date_str}
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")

# –ó–∞–ø—É—Å–∫ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
async def start_event_creation(message: types.Message):
    user_id = message.from_user.id
    event_creation_state[user_id] = {"step": "date"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∑–∞–≤—Ç—Ä–∞ –≤ 15:00'):")

# –ü–æ—à–∞–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
@dp.message_handler(lambda message: message.from_user.id in event_creation_state)
async def event_creation_handler(message: types.Message):
    user_id = message.from_user.id
    state = event_creation_state[user_id]
    step = state.get("step")
    if step == "date":
        parsed_date = dateparser.parse(message.text, languages=['ru'])
        if not parsed_date:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –µ—â—ë —Ä–∞–∑:")
            return
        state["date"] = parsed_date.isoformat()
        state["step"] = "title"
        await message.answer(f"–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {parsed_date}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    elif step == "title":
        state["title"] = message.text.strip()
        state["step"] = "category"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º):")
    elif step == "category":
        state["category"] = message.text.strip()
        state["step"] = "recurrence"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (none, daily, weekly, monthly, yearly). –ï—Å–ª–∏ –Ω–µ—Ç ‚Äì –≤–≤–µ–¥–∏—Ç–µ 'none':")
    elif step == "recurrence":
        recurrence = message.text.strip().lower()
        if recurrence not in ["none", "daily", "weekly", "monthly", "yearly"]:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–∑: none, daily, weekly, monthly, yearly:")
            return
        state["recurrence"] = recurrence
        state["step"] = "reminder"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–≤ –º–∏–Ω—É—Ç–∞—Ö –¥–æ —Å–æ–±—ã—Ç–∏—è, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äì –≤–≤–µ–¥–∏—Ç–µ 0 –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):")
    elif step == "reminder":
        text = message.text.strip()
        if text == "" or text == "0":
            state["reminder"] = None
        else:
            try:
                state["reminder"] = int(text)
            except ValueError:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç –∏–ª–∏ 0:")
                return
        state["step"] = "description"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):")
    elif step == "description":
        state["description"] = message.text.strip()
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
        summary = (
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n–î–∞—Ç–∞: {state['date']}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {state['title']}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {state.get('category','')}\n–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {state.get('recurrence','none')}\n"
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {state.get('reminder','')}\n–û–ø–∏—Å–∞–Ω–∏–µ: {state.get('description','')}\n"
        )
        inline_kb = InlineKeyboardMarkup()
        inline_kb.add(
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="event_confirm:yes"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="event_confirm:no")
        )
        state["step"] = "confirm"
        await message.answer(summary, reply_markup=inline_kb)
    elif step == "voice_modification":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Ä–µ—à–∏–ª –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ,
        # –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: "–¥–∞—Ç–∞|–Ω–∞–∑–≤–∞–Ω–∏–µ"
        parts = message.text.split("|")
        if len(parts) != 2:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–∞—Ç–∞|–Ω–∞–∑–≤–∞–Ω–∏–µ':")
            return
        parsed_date = dateparser.parse(parts[0].strip(), languages=['ru'])
        if not parsed_date:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        state["date"] = parsed_date.isoformat()
        state["title"] = parts[1].strip()
        state["step"] = "confirm_voice"
        summary = f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: –î–∞—Ç–∞: {state['date']}, –ù–∞–∑–≤–∞–Ω–∏–µ: {state['title']}\n–ù–∞–∂–º–∏—Ç–µ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏–ª–∏ –û—Ç–º–µ–Ω–∏—Ç—å."
        inline_kb = InlineKeyboardMarkup()
        inline_kb.add(
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="voice_event_confirm:yes"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="voice_event_confirm:no")
        )
        await message.answer(summary, reply_markup=inline_kb)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
@dp.callback_query_handler(lambda call: call.data.startswith("event_confirm:"))
async def event_confirm_callback(call: types.CallbackQuery):
    user_id = call.from_user.id
    response = call.data.split(":", 1)[1]
    if response == "yes":
        state = event_creation_state.get(user_id)
        if state:
            new_event = {
                "id": str(uuid.uuid4()),
                "user_id": user_id,
                "title": state["title"],
                "category": state.get("category", ""),
                "date": state["date"],
                "recurrence": state.get("recurrence", "none"),
                "reminder": state.get("reminder", None),
                "description": state.get("description", "")
            }
            events.append(new_event)
            save_events(events)
            await call.message.answer("–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        else:
            await call.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    else:
        await call.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    if user_id in event_creation_state:
        event_creation_state.pop(user_id)
    await call.answer()

# -----------------------
# –ì–û–õ–û–°–û–í–û–ï –°–û–ó–î–ê–ù–ò–ï –°–û–ë–´–¢–ò–Ø
# -----------------------

@dp.message_handler(content_types=types.ContentType.VOICE)
async def handle_voice(message: types.Message):
    user_id = message.from_user.id
    try:
        file = await message.voice.get_file()
        with tempfile.NamedTemporaryFile(delete=False, prefix="voice_", suffix=".ogg") as tmp:
            temp_filename = tmp.name
        await bot.download_file(file.file_path, temp_filename)
        def recognize():
            with sr.AudioFile(temp_filename) as source:
                audio = recognizer.record(source)
            return recognizer.recognize_google(audio, language="ru-RU")
        try:
            text = await asyncio.to_thread(recognize)
            parsed_date = dateparser.parse(text, languages=['ru'])
            state = {}
            if parsed_date:
                state["date"] = parsed_date.isoformat()
                state["title"] = text  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
                state["step"] = "confirm_voice"
                summary = (
                    f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n–î–∞—Ç–∞: {state['date']}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {state['title']}\n\n"
                    "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–∞—Ç–∞|–Ω–∞–∑–≤–∞–Ω–∏–µ'.\n"
                    "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å."
                )
                inline_kb = InlineKeyboardMarkup()
                inline_kb.add(
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="voice_event_confirm:yes"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="voice_event_confirm:no")
                )
                event_creation_state[user_id] = state
                await message.answer(summary, reply_markup=inline_kb)
            else:
                state["step"] = "date"
                state["title"] = text
                event_creation_state[user_id] = state
                await message.answer(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: {text}\n–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:")
        except sr.UnknownValueError:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        except sr.RequestError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–∏—Å—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            await message.answer("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            os.remove(temp_filename)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
@dp.callback_query_handler(lambda call: call.data.startswith("voice_event_confirm:"))
async def voice_event_confirm_callback(call: types.CallbackQuery):
    user_id = call.from_user.id
    response = call.data.split(":", 1)[1]
    if response == "yes":
        state = event_creation_state.get(user_id)
        if state:
            # –ï—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            state["step"] = "category"
            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º):")
        else:
            await call.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    else:
        await call.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        if user_id in event_creation_state:
            event_creation_state.pop(user_id)
    await call.answer()

# -----------------------
# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ò –£–î–ê–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–ô
# -----------------------

@dp.callback_query_handler(lambda call: call.data.startswith("edit:"))
async def edit_event_callback(call: types.CallbackQuery):
    event_id = call.data.split(":", 1)[1]
    user_id = call.from_user.id
    event = next((ev for ev in events if ev["id"] == event_id and ev["user_id"] == user_id), None)
    if not event:
        await call.message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    event_edit_state[user_id] = event_id
    await call.message.answer(
        f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–æ–±—ã—Ç–∏–µ. –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event['title']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {event.get('category', '')}\n"
        f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {event.get('recurrence', 'none')}\n"
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {event.get('reminder', '')}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.get('description', '')}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ | –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ | –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ"
    )

@dp.message_handler(lambda message: message.from_user.id in event_edit_state)
async def edit_event_handler(message: types.Message):
    user_id = message.from_user.id
    event_id = event_edit_state.get(user_id)
    event = next((ev for ev in events if ev["id"] == event_id and ev["user_id"] == user_id), None)
    if not event:
        await message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        event_edit_state.pop(user_id, None)
        return
    try:
        parts = [part.strip() for part in message.text.split("|")]
        event["title"] = parts[0]
        event["category"] = parts[1] if len(parts) > 1 else ""
        event["recurrence"] = parts[2].lower() if len(parts) > 2 else "none"
        event["reminder"] = int(parts[3]) if len(parts) > 3 and parts[3].isdigit() else None
        event["description"] = parts[4] if len(parts) > 4 else ""
        save_events(events)
        await message.answer("–°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
    finally:
        event_edit_state.pop(user_id, None)

@dp.callback_query_handler(lambda call: call.data.startswith("delete:"))
async def delete_event_callback(call: types.CallbackQuery):
    event_id = call.data.split(":", 1)[1]
    user_id = call.from_user.id
    global events
    before_count = len(events)
    events = [ev for ev in events if not (ev["id"] == event_id and ev["user_id"] == user_id)]
    if len(events) < before_count:
        save_events(events)
        await call.message.answer("–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await call.message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# -----------------------
# –ü–û–ò–°–ö –°–û–ë–´–¢–ò–ô
# -----------------------

@dp.message_handler(lambda message: message.text == "üîç –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π")
async def search_event_prompt(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π:")
    search_state[message.from_user.id] = True

@dp.message_handler(lambda message: search_state.get(message.from_user.id, False))
async def search_event_handler(message: types.Message):
    user_id = message.from_user.id
    keyword = message.text.lower()
    matching_events = [
        ev for ev in events
        if ev["user_id"] == user_id and (keyword in ev["title"].lower() or keyword in ev.get("description", "").lower())
    ]
    if not matching_events:
        await message.answer("–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        text = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n"
        for ev in matching_events:
            text += f"ID: {ev['id']}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {ev['title']}\n–î–∞—Ç–∞: {ev['date']}\n\n"
        await message.answer(text)
    search_state.pop(user_id, None)

# -----------------------
# –û–¢–ß–Å–¢ –ó–ê –ú–ï–°–Ø–¶
# -----------------------

@dp.message_handler(lambda message: message.text == "üìä –û—Ç—á–µ—Ç")
async def report_handler(message: types.Message):
    user_id = message.from_user.id
    today = datetime.today()
    current_year = today.year
    current_month = today.month
    report_events = []
    for ev in events:
        if ev["user_id"] == user_id:
            try:
                event_date = datetime.fromisoformat(ev["date"]).date()
            except Exception:
                continue
            if event_date.year == current_year and event_date.month == current_month:
                report_events.append(ev)
            else:
                days_in_month = [date(current_year, current_month, d) for d in range(1, calendar.monthrange(current_year, current_month)[1] + 1)]
                if any(event_occurs_on(ev, d) for d in days_in_month):
                    report_events.append(ev)
    total_events = len(report_events)
    categories = {}
    for ev in report_events:
        cat = ev.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        categories[cat] = categories.get(cat, 0) + 1
    text = f"–û—Ç—á–µ—Ç –∑–∞ {calendar.month_name[current_month]} {current_year}:\n"
    text += f"–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total_events}\n"
    for cat, count in categories.items():
        text += f"{cat}: {count}\n"
    await message.answer(text)

# -----------------------
# –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø (–∑–∞–≥–ª—É—à–∫–∞) –∏ –ù–ê–°–¢–†–û–ô–ö–ò
# -----------------------

@dp.message_handler(lambda message: message.text == "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
async def sync_handler(message: types.Message):
    await message.answer("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Calendar –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

@dp.message_handler(lambda message: message.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_handler(message: types.Message):
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã.")

# -----------------------
# –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –ò –û–ß–ò–°–¢–ö–ê –í–†–ï–ú–ï–ù–ù–´–• –§–ê–ô–õ–û–í
# -----------------------

async def check_reminders():
    now = datetime.now()
    for ev in events:
        if ev.get("reminder") is not None:
            try:
                event_dt = datetime.fromisoformat(ev["date"])
            except Exception:
                continue
            reminder_minutes = ev["reminder"]
            reminder_time = event_dt - timedelta(minutes=reminder_minutes)
            if reminder_time <= now < reminder_time + timedelta(minutes=1):
                try:
                    await bot.send_message(ev["user_id"], f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –°–∫–æ—Ä–æ —Å–æ–±—ã—Ç–∏–µ '{ev['title']}'")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

scheduler.add_job(check_reminders, "interval", minutes=1)

def cleanup_temp_files():
    temp_dir = tempfile.gettempdir()
    now = datetime.now()
    for filename in os.listdir(temp_dir):
        if filename.startswith("voice_") and filename.endswith(".ogg"):
            file_path = os.path.join(temp_dir, filename)
            try:
                file_mtime = datetime.fromtimestamp(os.path.getmtime(file_path))
                if now - file_mtime > timedelta(hours=24):
                    os.remove(file_path)
                    logging.info(f"–£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")

scheduler.add_job(cleanup_temp_files, "interval", hours=24)

# -----------------------
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# -----------------------

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    scheduler.start()
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
