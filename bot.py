import logging
import asyncio
import speech_recognition as sr
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from googleapiclient.discovery import build
from PIL import Image, ImageDraw, ImageFont
import requests
import datetime
import json

API_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
recognizer = sr.Recognizer()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def load_user_settings():
    try:
        with open("user_settings.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError:
        return {}

def save_user_settings(settings):
    try:
        with open("user_settings.json", "w") as file:
            json.dump(settings, file)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

user_settings = load_user_settings()

# –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å"))
main_kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"))
main_kb.add(KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))

settings_kb = ReplyKeyboardMarkup(resize_keyboard=True)
settings_kb.add(KeyboardButton("üïí –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"))
settings_kb.add(KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"))

schedule_kb = ReplyKeyboardMarkup(resize_keyboard=True)
schedule_kb.add(KeyboardButton("üìå –û–¥–∏–Ω–∞–∫–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π"))
schedule_kb.add(KeyboardButton("üìÜ –†–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è"))
schedule_kb.add(KeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
schedule_kb.add(KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"))

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
def send_daily_schedule(user_id):
    try:
        asyncio.create_task(bot.send_message(user_id, "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ..."))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")

def send_evening_report(user_id):
    try:
        asyncio.create_task(bot.send_message(user_id, "–í–∞—à –≤–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç: ..."))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def confirm_event(user_id, text):
    confirm_kb = InlineKeyboardMarkup()
    confirm_kb.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{text}"))
    confirm_kb.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    await bot.send_message(user_id, f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?", reply_markup=confirm_kb)

@dp.callback_query_handler(lambda call: call.data.startswith("confirm:"))
async def confirmed_event(call: types.CallbackQuery):
    text = call.data.split(":", 1)[1]
    await bot.send_message(call.from_user.id, f"–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {text}")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å

@dp.callback_query_handler(lambda call: call.data == "cancel")
async def canceled_event(call: types.CallbackQuery):
    await bot.send_message(call.from_user.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentType.VOICE)
async def handle_voice(message: types.Message):
    try:
        file = await message.voice.get_file()
        file_path = file.file_path
        await bot.download_file(file_path, "voice.ogg")
        with sr.AudioFile("voice.ogg") as source:
            audio = recognizer.record(source)
        text = recognizer.recognize_google(audio, language="ru-RU")
        await confirm_event(message.from_user.id, text)
    except sr.UnknownValueError:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except sr.RequestError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–∏—Å—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
        await message.answer("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    scheduler.start()
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
